// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Troupon.Catalog.Infra.Persistence;

namespace Troupon.Catalog.Service.Api.Migrations
{
    [DbContext(typeof(CatalogDbContext))]
    [Migration("20210513131628_DealManagement")]
    partial class DealManagement
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Troupon")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Troupon.Catalog.Core.Domain.Entities.Account.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BillingInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MerchantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BillingInfoId");

                    b.HasIndex("LocationId");

                    b.HasIndex("MerchantId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Troupon.Catalog.Core.Domain.Entities.Account.BillingInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreditCardId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CreditCardId");

                    b.ToTable("BillingInfo");
                });

            modelBuilder.Entity("Troupon.Catalog.Core.Domain.Entities.Category.DealCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DealId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DealId");

                    b.ToTable("DealCategories");
                });

            modelBuilder.Entity("Troupon.Catalog.Core.Domain.Entities.Common.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateProvince")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Troupon.Catalog.Core.Domain.Entities.Common.CreditCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cvv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CreditCard");
                });

            modelBuilder.Entity("Troupon.Catalog.Core.Domain.Entities.Common.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CurrencyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("Troupon.Catalog.Core.Domain.Entities.Common.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PositionId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Troupon.Catalog.Core.Domain.Entities.Common.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("Troupon.Catalog.Core.Domain.Entities.Common.Price", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Price");
                });

            modelBuilder.Entity("Troupon.Catalog.Core.Domain.Entities.Deal.Deal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Limitation")
                        .HasColumnType("int");

                    b.Property<string>("OtherConditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Deals");
                });

            modelBuilder.Entity("Troupon.Catalog.Core.Domain.Entities.Deal.DealOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DealId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DealId");

                    b.ToTable("DealOption");
                });

            modelBuilder.Entity("Troupon.Catalog.Core.Domain.Entities.Deal.DealPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CurrentPriceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DealOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OriginalPriceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CurrentPriceId");

                    b.HasIndex("DealOptionId");

                    b.HasIndex("OriginalPriceId");

                    b.ToTable("DealPrice");
                });

            modelBuilder.Entity("Troupon.Catalog.Core.Domain.Entities.DealEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MerchantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MerchantId");

                    b.ToTable("DealEntity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0d53c6ce-6181-42a8-8616-03f86f883112"),
                            Description = "0",
                            Details = "1",
                            MerchantId = new Guid("5e448b39-db5b-42a4-bc12-52f34dcd5c14"),
                            Name = "0"
                        },
                        new
                        {
                            Id = new Guid("060fad6c-112c-49b5-91eb-490a700098a5"),
                            Description = "1",
                            Details = "0",
                            MerchantId = new Guid("5e448b39-db5b-42a4-bc12-52f34dcd5c14"),
                            Name = "1"
                        },
                        new
                        {
                            Id = new Guid("effb7842-5cf8-4daa-86c9-4b253e5749c1"),
                            Description = "2",
                            Details = "0",
                            MerchantId = new Guid("5e448b39-db5b-42a4-bc12-52f34dcd5c14"),
                            Name = "1"
                        },
                        new
                        {
                            Id = new Guid("565fa793-22f9-4ca3-936b-cfeb5da17453"),
                            Description = "3",
                            Details = "0",
                            MerchantId = new Guid("5e448b39-db5b-42a4-bc12-52f34dcd5c14"),
                            Name = "1"
                        },
                        new
                        {
                            Id = new Guid("1dba892b-24fe-4007-8cb8-245f5afbee10"),
                            Description = "4",
                            Details = "0",
                            MerchantId = new Guid("532e8ec2-121d-4a86-bfe2-8812c2c27232"),
                            Name = "1"
                        },
                        new
                        {
                            Id = new Guid("87c9ab80-0c13-49ba-8235-e23a7e4df525"),
                            Description = "5",
                            Details = "0",
                            MerchantId = new Guid("532e8ec2-121d-4a86-bfe2-8812c2c27232"),
                            Name = "1"
                        },
                        new
                        {
                            Id = new Guid("2fe4efb6-1e2f-4b54-94c4-0c8b210198c9"),
                            Description = "6",
                            Details = "0",
                            MerchantId = new Guid("83c1dce6-97d5-4a35-afb7-4eb86577160c"),
                            Name = "1"
                        },
                        new
                        {
                            Id = new Guid("8aeb6e23-8099-47e4-9e34-2e22df9ee79c"),
                            Description = "7",
                            Details = "1",
                            MerchantId = new Guid("83c1dce6-97d5-4a35-afb7-4eb86577160c"),
                            Name = "1"
                        });
                });

            modelBuilder.Entity("Troupon.Catalog.Core.Domain.Entities.Merchant.Merchant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Merchants");
                });

            modelBuilder.Entity("Troupon.Catalog.Core.Domain.Entities.MerchantEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MerchantEntity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5e448b39-db5b-42a4-bc12-52f34dcd5c14"),
                            ImageUri = "https://picsum.photos/id/1023/200/300",
                            Name = "Awsome Goods Plus"
                        },
                        new
                        {
                            Id = new Guid("532e8ec2-121d-4a86-bfe2-8812c2c27232"),
                            ImageUri = "https://picsum.photos/id/1003/200/300",
                            Name = "Masso Relax Inc"
                        },
                        new
                        {
                            Id = new Guid("83c1dce6-97d5-4a35-afb7-4eb86577160c"),
                            ImageUri = "https://picsum.photos/id/1012/200/300",
                            Name = "Antirouille la magouille"
                        },
                        new
                        {
                            Id = new Guid("042038de-1e60-427d-bdce-7d683ffc8bf5"),
                            ImageUri = "https://picsum.photos/id/1011/200/300",
                            Name = "Bronsage & Debosselage Reuni"
                        });
                });

            modelBuilder.Entity("Troupon.Catalog.Core.Domain.Entities.Account.Account", b =>
                {
                    b.HasOne("Troupon.Catalog.Core.Domain.Entities.Account.BillingInfo", "BillingInfo")
                        .WithMany()
                        .HasForeignKey("BillingInfoId");

                    b.HasOne("Troupon.Catalog.Core.Domain.Entities.Common.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("Troupon.Catalog.Core.Domain.Entities.Merchant.Merchant", "Merchant")
                        .WithMany()
                        .HasForeignKey("MerchantId");

                    b.Navigation("BillingInfo");

                    b.Navigation("Location");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Troupon.Catalog.Core.Domain.Entities.Account.BillingInfo", b =>
                {
                    b.HasOne("Troupon.Catalog.Core.Domain.Entities.Common.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Troupon.Catalog.Core.Domain.Entities.Common.CreditCard", "CreditCard")
                        .WithMany()
                        .HasForeignKey("CreditCardId");

                    b.Navigation("Address");

                    b.Navigation("CreditCard");
                });

            modelBuilder.Entity("Troupon.Catalog.Core.Domain.Entities.Category.DealCategory", b =>
                {
                    b.HasOne("Troupon.Catalog.Core.Domain.Entities.Deal.Deal", null)
                        .WithMany("Categories")
                        .HasForeignKey("DealId");
                });

            modelBuilder.Entity("Troupon.Catalog.Core.Domain.Entities.Common.Location", b =>
                {
                    b.HasOne("Troupon.Catalog.Core.Domain.Entities.Common.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Troupon.Catalog.Core.Domain.Entities.Common.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.Navigation("Address");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Troupon.Catalog.Core.Domain.Entities.Common.Price", b =>
                {
                    b.HasOne("Troupon.Catalog.Core.Domain.Entities.Common.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Troupon.Catalog.Core.Domain.Entities.Deal.Deal", b =>
                {
                    b.HasOne("Troupon.Catalog.Core.Domain.Entities.Account.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Troupon.Catalog.Core.Domain.Entities.Deal.DealOption", b =>
                {
                    b.HasOne("Troupon.Catalog.Core.Domain.Entities.Deal.Deal", null)
                        .WithMany("Options")
                        .HasForeignKey("DealId");
                });

            modelBuilder.Entity("Troupon.Catalog.Core.Domain.Entities.Deal.DealPrice", b =>
                {
                    b.HasOne("Troupon.Catalog.Core.Domain.Entities.Common.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Troupon.Catalog.Core.Domain.Entities.Common.Price", "CurrentPrice")
                        .WithMany()
                        .HasForeignKey("CurrentPriceId");

                    b.HasOne("Troupon.Catalog.Core.Domain.Entities.Deal.DealOption", null)
                        .WithMany("Prices")
                        .HasForeignKey("DealOptionId");

                    b.HasOne("Troupon.Catalog.Core.Domain.Entities.Common.Price", "OriginalPrice")
                        .WithMany()
                        .HasForeignKey("OriginalPriceId");

                    b.Navigation("Currency");

                    b.Navigation("CurrentPrice");

                    b.Navigation("OriginalPrice");
                });

            modelBuilder.Entity("Troupon.Catalog.Core.Domain.Entities.DealEntity", b =>
                {
                    b.HasOne("Troupon.Catalog.Core.Domain.Entities.MerchantEntity", "Merchant")
                        .WithMany("Deals")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Troupon.Catalog.Core.Domain.Entities.Deal.Deal", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("Troupon.Catalog.Core.Domain.Entities.Deal.DealOption", b =>
                {
                    b.Navigation("Prices");
                });

            modelBuilder.Entity("Troupon.Catalog.Core.Domain.Entities.MerchantEntity", b =>
                {
                    b.Navigation("Deals");
                });
#pragma warning restore 612, 618
        }
    }
}
